<?php


namespace Tests\Feature;


use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ProductTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->refreshTestDatabase();

    }

    public function testCreateProduct()
    {
        $data = [
            '_id' => '507f191e810c19729de860ea',
            'name' => 'Product 1',
            'price' => 100000,
            'image' => 'http://s3-ap-southeast-1.amazonaws.com/s3.irvinsaltedegg.com/engineering-test/images/product-1.jpg'
        ];

        $result = $this->api()->json('POST','/api/product', $data);

        $result->assertStatus(200)
            ->assertJson([
                'data' => $data
            ]);
    }

    public function testUpdateProduct()
    {
        $id = '507f191e810c19729de860ea';
        $data = [
            '_id' =>  $id,
            'name' => 'Product 1',
            'price' => 100000,
            'image' => 'http://s3-ap-southeast-1.amazonaws.com/s3.irvinsaltedegg.com/engineering-test/images/product-1.jpg'
        ];
        $product = new Product($data);
        $product->save();

        $updatedData = [
            '_id' => $id,
            'name' => 'Product 1',
            'price' => 9000,
            'image' => 'http://s3-ap-southeast-1.amazonaws.com/s3.irvinsaltedegg.com/engineering-test/images/product-1.jpg'
        ];

        $result = $this->api()->json('PUT','/api/product/' . $id, $updatedData);
        $result->assertStatus(200)
            ->assertJson([
                'data' => $updatedData
            ]);
    }

    public function testDeleteProduct()
    {
        $id = '507f191e810c19729de860ea';
        $data = [
            '_id' =>  $id,
            'name' => 'Product 1',
            'price' => 100000,
            'image' => 'http://s3-ap-southeast-1.amazonaws.com/s3.irvinsaltedegg.com/engineering-test/images/product-1.jpg'
        ];
        $product = new Product($data);
        $product->save();

        $result = $this->api()->json('DELETE', '/api/product/' . $id);
        $result->assertStatus(200)
            ->assertJson([
                'data' => [ $id ]
            ]);
    }

    private function api() {
        $user = factory(User::class)->create();
        return $this
            ->actingAs($user);
    }
}